import{render}from"./player.view.js";import{player,game}from"./player.state.js";import{getSocket}from"./player.socket.js";const isObject=e=>null!==e&&"object"==typeof e,compareObs=(e,t,a="",r)=>{const o=[],s=new Set([...Object.keys(e),...Object.keys(t)]);for(const c of s){const s=a?`${a}.${c}`:c,p=e[c],l=t[c];if(p===l)continue;isObject(p)&&isObject(l)?o.push(...compareObs(p,l,s,r)):o.push(s)}const c=o.filter((e=>{const t=e.match(/playersFull\.(pf?\d+|p\d+)\./);return!t||t[1]===r}));return c.forEach((e=>{})),c};export const updateGame=e=>{Object.assign(game,e)};export const onGameUpdate=e=>{e._updateSource;delete e._updateSource;const t=compareObs(game,e),a=e.playersFull[player.id];if(!$.isEmptyObject(player)){if(a){const e=compareObs(player,a);e.length>0&&(console.log("will call playerUpdate",e),onPlayerUpdate(a))}t.length>0&&(updateGame(e),console.log("game update renders",t),render(e))}};export const onPlayerUpdate=e=>{Object.assign(player,e),render()};export const leaveGame=()=>{const e={game:game.uniqueID,player:player.id};getSocket().emit("removePlayer",e,(e=>{e.success&&clearStorageCallback()}))};
