import{player,game}from"./player.state.js";import{addToStorage}from"./player.storage.js";let renderState={},renderStateLocal={};const setRenderStateLocal=e=>{renderStateLocal="string"==typeof e?JSON.parse(e):Object.assign({},e),e&&(e.preserveOb||delete renderStateLocal.ob),renderStateLocal.hasOwnProperty("temp")?addToStorage("renderState",window.clone(renderStateLocal)):console.warn("renderState not stored as no 'temp' property found")},showOverlay=(e,t)=>{$(".overlay")&&$(".overlay").remove(),window.getTemplate("overlay",{},(r=>{$("body").append(r),window.renderTemplate("overlay",e,t,(()=>{$(".overlay").fadeIn(300)}))}))},getSelect=(e,t)=>Object.fromEntries(Object.entries(e).filter((([e])=>t.includes(e)))),getRenderDetailV1=()=>{let e={};return Object.assign(e,getSelect(player,["id","index","connected","socketID","isFake","isLead"])),Object.assign(e,getSelect(player.teamObj,["title"])),Object.assign(e,getSelect(game,["uniqueID","address"])),e},getRenderDetail=(e,t)=>{let r="";return Object.entries(getSelect(e,t)).forEach((e=>{r+=`<tr><td>${e[0]}: </td><td>${e[1]}</td></tr>`})),r};export const render=()=>{const e=$("#insertion");let t="<table>";t+='<tr><td colspan="2">PLAYER</td></tr>',t+=getRenderDetail(player,["id","index","connected","socketID","isFake","isLead"]),t+='<tr><td colspan="2">TEAM</td></tr>',t+=getRenderDetail(player.teamObj,["title","type"]),t+='<tr><td colspan="2">GAME</td></tr>',t+=getRenderDetail(game,["uniqueID","address","round"]),t+="</table>",e.html(t),updateRenderState({test:!0,temp:"test"})};export const renderV2=()=>{const e=$("#insertion");let t="<table>";const r=getRenderDetail();console.log(r),Object.entries(player).forEach((e=>{"teamObj"===e[0]?e[1]&&e[1].hasOwnProperty("title")&&(t+=`<tr><td>team</td><td>${e[1].title}</td></tr>`):t+=`<tr><td>${e[0]}: </td><td>${e[1]}</td></tr>`})),t+="<tr><td>GAME</td><td></td></tr>",Object.entries(game).forEach((e=>{t+=`<tr><td>${e[0]}: </td><td>${e[1]}</td></tr>`})),t+="</table>",e.html(t),updateRenderState({test:!0,temp:"test"})};export const renderV1=e=>{console.log("render stuff"),console.log(e),console.log(player.connected)};export const updateRenderState=e=>{if(e){const t=[];Object.assign(renderState,e);for(let e in renderState)null===renderState[e]&&(t.push(e),delete renderState[e]);delete renderState.note,setRenderStateLocal(renderState)}};export const identifyPlayer=(e,t)=>{const r={id:player.id,connected:player.connected,sock:player.socketID,stored:"null",team:player.teamObj.title};showOverlay("playerID",r)};
